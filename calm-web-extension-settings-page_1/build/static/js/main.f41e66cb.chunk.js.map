{"version":3,"sources":["async-tools.js","configuration.js","api/chrome-storage.js","api/settings-storage.js","settings-page.jsx","settings-storage-controller.jsx","App.js","serviceWorker.js","index.js"],"names":["ItemFetcher","fetchItems","renderSuccess","renderLoading","renderError","onSuccess","result","onError","errorMessage","isErrorIfEmpty","items","useQuery","useEffect","data","error","isLoading","message","window","screen","height","SETTINGS_SAVE_KEY","defaultSettings","linkButtonConfigGroup","name","links","lowValueURLTags","saveSettings","value","a","console","log","saveStoragePromise","fetchIsItemValueNotSet","fetchItem","settings","key","Promise","resolve","reject","chrome","storage","sync","get","set","maybeValue","chromeStorage","fetchSettings","getKeyFromIndex","index","uuid","SettingsPage","newLinkButtonConfigGroup","saveStatus","useState","currentLowValueURLTags","setLowValueURLTags","currentLinkButtonConfigGroup","setLinkButtonConfigGroup","allSettings","style","display","flexDirection","ListEditor","originalList","onListChange","newUrlTags","title","labels","map","_","LinkButtonConfigEditor","marginTop","Button","color","variant","onClick","onSave","useDictionary","removeItemByKey","addItemWithValue","updateItem","linkButtonDictionary","itemDictionary","getDictionaryValues","width","listStyle","margin","paddingLeft","textAlign","itemDictionaryElement","marginBottom","TextInput","originalValue","label","onValueChange","newButtonName","newLink","originalItems","item","setItemDictionary","newValue","newKey","length","concat","keyToDelete","filter","itemToUpdate","dictionaryItems","TextField","id","fullWidth","onChange","event","target","defaultValue","SettingsPageStorageController","saveItems","linkButtonNamesAndLinks","useMutation","mutateSaveConfigGroup","asyncSave","configToSave","setConfigToSave","handleSave","SnackAlert","severity","settingsResult","isSuccess","isError","children","autoHideDuration","isOpen","setIsOpen","setTimeout","Snackbar","open","onClose","elevation","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f41e66cb.chunk.js","sourcesContent":["import {useQuery, useMutation, ReactQueryCacheProvider} from \"react-query\";\nimport React, {useEffect, useState} from \"react\";\nimport {Button, Snackbar, TextField} from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nexport function ItemFetcherWithAlerts({\n  fetchItems,\n  renderSuccess = () => <></>,\n  renderLoading = () => <></>,\n  renderError = () => <></>,\n\n  onSuccess = () => {},\n  onError = () => {},\n  shouldAlertSuccess = true,\n  shouldAlertFailure = true,\n}) {\n  return (\n    <ItemFetcher\n      fetchItems={fetchItems}\n      renderError={(errorMessage) => (\n        <>\n          {shouldAlertFailure && (\n            <Snackbar open={true} autoHideDuration={6000}>\n              <Alert severity=\"error\">\n                Load Failed <br />\n                {errorMessage}\n              </Alert>\n            </Snackbar>\n          )}\n          {renderError(errorMessage)}\n        </>\n      )}\n      renderLoading={() => renderLoading()}\n      renderSuccess={(settingsResult) => (\n        <>\n          {shouldAlertSuccess && (\n            <Snackbar open={true} autoHideDuration={6000}>\n              <Alert severity=\"success\">Load Succeeded</Alert>\n            </Snackbar>\n          )}\n\n          {renderSuccess(settingsResult)}\n        </>\n      )}\n      onSuccess={onSuccess}\n      onError={onError}\n    />\n  );\n}\nexport function ItemFetcher({\n  fetchItems,\n  renderSuccess,\n  renderLoading = () => <></>,\n  renderError = () => <></>,\n  onSuccess = (result) => {},\n  onError = (errorMessage) => {},\n  isErrorIfEmpty = true,\n}) {\n  const items = useQuery(\"itemFetcher_\", fetchItems);\n\n  useEffect(() => {\n    if (items.data) {\n      //NOTE: if this sets parent state then renderSuccess will not be renderd\n      onSuccess(items.data);\n    }\n  }, [items.data]);\n\n  useEffect(() => {\n    if (items.error) {\n      onError(items.error);\n    }\n  }, [items.error]);\n\n  if (items.isLoading) {\n    return renderLoading();\n  }\n  if (items.error) {\n    return renderError(items.error.message);\n  }\n  if (items.data) {\n  }\n\n  if (items.data === null && isErrorIfEmpty) {\n    return renderError(\"RESULT IS NULL\");\n  }\n  return renderSuccess(items.data);\n}\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n","export const configuration = {\n  isRedirectEnabled: false,\n};\n\nexport const ENVIRONMENT = \"CHROME\";\n// export const ENVIRONMENT = \"MOCK\";\n\nexport const redirectDelaySeconds = 14;\nexport const defaultMaxScrollLength = 1.5 * window.screen.height;\nexport const SETTINGS_SAVE_KEY = \"SMOOTH_GO_SETTINGS_9\";\nexport const SHOULD_SETTINGS_EXIST_KEY = \"SMOOTH_GO_SHOULD_SETTINGS_EXIST_9\";\nexport const defaultSettings = {\n  linkButtonConfigGroup: [\n    {name: \"Open Google\", links: [\"https://google.com\"]},\n    // {name: \"Open Music\", links: [\"https://music.youtube.com\"]},\n    {name: \"Open Music\", links: [\"https://pandora.com\"]},\n    {name: \"Open Podcasts\", links: [\"https://radiopublic.com/\"]},\n    {\n      name: \"Open Calm Video\",\n      links: [\n        \"https://www.bing.com/videos/search?q=4K+Cab+ride+St.+Moritz+-+Tirano%2c+fresh+snow%2c+strong+winds+%26+snowdrifts+%5b03.2020%5d&&view=detail&mid=A03D128BC5D3BDAA6A19A03D128BC5D3BDAA6A19&&FORM=VRDGAR&ru=%2Fvideos%2Fsearch%3Fq%3D4K%2BCab%2Bride%2BSt.%2BMoritz%2B-%2BTirano%252c%2Bfresh%2Bsnow%252c%2Bstrong%2Bwinds%2B%2526%2Bsnowdrifts%2B%255b03.2020%255d%26FORM%3DHDRSC3\",\n      ],\n    },\n    {name: \"Open Books\", links: [\"https://play.google.com/books\"]},\n  ],\n  lowValueURLTags: [\n    \"youtube.com\",\n    \"reddit.com\",\n    \"facebook.com\",\n    \"twitter.com\",\n    \"instagram.com\",\n    \"tiktok.com\",\n  ],\n};\n\nconst redirectDestination = \"https://radiopublic.com/99pi\";\nexport function getRedirectDestination() {\n  return redirectDestination;\n}\n\nexport const calmVideoUrls = [\n  \"https://www.youtube.com/embed/videoseries?list=PLBhIaMGFdaG8mlQDFah-23_YT7m0QF5Zi\",\n];\nexport const maxZIndex = 9999;\nconst tmpLowValueSites = [\n  \"youtube.com\",\n  \"m.khal.me\",\n  \"overdrive.com\",\n  \"reddit.com\",\n  \"tiktok.com\",\n  \"businessinsider.com\",\n  \"google.com\",\n  \"eruda.liriliri.io\",\n  \"eruda\",\n];\nexport function getIsSiteLowValue(url) {\n  const isSiteNameInUrlGroup = tmpLowValueSites.map((partialSite) => {\n    return url.includes(partialSite);\n  });\n  return isSiteNameInUrlGroup.includes(true);\n}\n\nexport function getLinkButtonConfigGroup() {\n  const defaultLinkButtonConfigGroup = [\n    {\n      name: \"Open Book\",\n      links: [\"https://read.amazon.com\", \"https://hoopladigital.com\"],\n    },\n\n    {\n      name: \"Open Music\",\n      links: [\"https://pandora.com\", \"https://spotify.com\"],\n    },\n\n    {\n      name: \"Open Google\",\n      links: [\"https://bing.com\"],\n    },\n\n    {\n      name: \"Open Podcasts\",\n      links: [\"https://radiopublic.com/99pi\"],\n    },\n  ];\n  const linkButtonConfigGroup = defaultLinkButtonConfigGroup;\n  return linkButtonConfigGroup;\n}\n","/*global chrome*/\nimport {SETTINGS_SAVE_KEY, defaultSettings} from \"../configuration.js\";\n\nexport async function saveSettings(value) {\n  console.log(\"saveSettings\", value);\n  await saveStoragePromise(SETTINGS_SAVE_KEY, value);\n}\nexport async function fetchSettings() {\n  console.log(\"fecthSettings\");\n  if (await fetchIsItemValueNotSet(SETTINGS_SAVE_KEY)) {\n    console.log(\"settings does not exist currently\", {SETTINGS_SAVE_KEY});\n    await saveSettings(defaultSettings);\n    return defaultSettings;\n  }\n  let settings = await fetchItem(SETTINGS_SAVE_KEY);\n  console.log(\"they do exist\", {settings}, {SETTINGS_SAVE_KEY});\n  return settings;\n}\n\nfunction fetchItem(key) {\n  return new Promise((resolve, reject) => {\n    chrome.storage.sync.get([key], function(result) {\n      resolve(result[key]);\n    });\n  });\n}\nfunction saveStoragePromise(key, value) {\n  return new Promise((resolve, reject) => {\n    chrome.storage.sync.set({[key]: value}, function() {\n      resolve();\n    });\n  });\n}\n\nasync function fetchIsItemValueNotSet(key) {\n  let maybeValue = await fetchItem(key);\n\n  return typeof maybeValue === \"undefined\";\n}\n","import * as mockStorage from \"./mock-storage.js\";\nimport * as chromeStorage from \"./chrome-storage.js\";\n\nimport {ENVIRONMENT} from \"../configuration.js\";\nlet environmentSaveSettings;\nlet environmentFetchSettings;\n\nswitch (ENVIRONMENT) {\n  case \"MOCK\":\n    environmentSaveSettings = mockStorage.saveSettings;\n    environmentFetchSettings = mockStorage.fetchSettings;\n\n    break;\n\n  case \"CHROME\":\n    environmentSaveSettings = chromeStorage.saveSettings;\n    environmentFetchSettings = chromeStorage.fetchSettings;\n\n    break;\n  default:\n}\nexport const saveSettings = environmentSaveSettings;\nexport const fetchSettings = environmentFetchSettings;\n","import {Button, Snackbar} from \"@material-ui/core\";\nimport {v4 as uuid} from \"uuid\";\nimport React, {useState, useEffect, useReducer} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport {fetchSettings} from \"./api/chrome-storage\";\n\nimport {SETTINGS_SAVE_KEY} from \"./configuration\";\n\n//for mocking in test\nexport function getKeyFromIndex(index) {\n  return uuid();\n}\nexport default function SettingsPage({\n  linkButtonConfigGroup,\n  lowValueURLTags,\n  saveSettings = (newLinkButtonConfigGroup) => {},\n  saveStatus = null,\n  //for mocking in test\n  getKeyFromIndex = (index) => uuid(),\n}) {\n  const [currentLowValueURLTags, setLowValueURLTags] = useState(\n    lowValueURLTags,\n  );\n\n  const [currentLinkButtonConfigGroup, setLinkButtonConfigGroup] = useState(\n    linkButtonConfigGroup,\n  );\n  const allSettings = {\n    linkButtonConfigGroup: currentLinkButtonConfigGroup,\n    lowValueURLTags: currentLowValueURLTags,\n  };\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <ListEditor\n          originalList={allSettings.lowValueURLTags}\n          onListChange={(newUrlTags) => {\n            setLowValueURLTags(newUrlTags);\n          }}\n          title={\"Websites where this extension is enabled\"}\n          labels={allSettings.lowValueURLTags.map((_, index) => {\n            return `Website to enable extension on`;\n          })}\n        />\n\n        <LinkButtonConfigEditor\n          linkButtonConfigGroup={linkButtonConfigGroup}\n          saveStatus={saveStatus}\n          onListChange={(newLinkButtonConfigGroup) => {\n            setLinkButtonConfigGroup(newLinkButtonConfigGroup);\n          }}\n          getKeyFromIndex={(index) => uuid()}\n        />\n        <div style={{marginTop: \"4%\"}}>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={() => {\n              saveSettings(allSettings);\n            }}\n          >\n            Save\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\nfunction useSettingsSaver() {\n  return {\n    // settings,\n    // saveSettings\n  };\n}\n\nfunction LinkButtonConfigEditor({\n  linkButtonConfigGroup,\n  onSave = (newLinkButtonConfigGroup) => {},\n  saveStatus = null,\n  onListChange = () => {},\n  //for mocking in test\n  getKeyFromIndex = (index) => uuid(),\n}) {\n  const listKeys = linkButtonConfigGroup.map((_, index) => {\n    return index;\n  });\n  const {\n    removeItemByKey,\n    addItemWithValue,\n    updateItem,\n    itemDictionary: linkButtonDictionary,\n    getDictionaryValues,\n  } = useDictionary(linkButtonConfigGroup);\n\n  useEffect(() => {\n    onListChange(getDictionaryValues());\n  }, [linkButtonDictionary]);\n\n  return (\n    <div>\n      <>\n        <h1>Button Settings</h1>\n        <ul\n          style={{\n            width: \"40%\",\n            listStyle: \"none\",\n            margin: \"auto\",\n            paddingLeft: \"0\",\n            textAlign: \"center\",\n          }}\n        >\n          {linkButtonDictionary.map((itemDictionaryElement, index) => {\n            return (\n              <li key={itemDictionaryElement.key} style={{margin: \"auto\"}}>\n                <div style={{marginBottom: \"5%\"}}>\n                  <div style={{marginBottom: \"1%\"}}>\n                    <TextInput\n                      originalValue={itemDictionaryElement.value.name}\n                      label={`Button ${index + 1} Name`}\n                      onValueChange={(newButtonName) => {\n                        updateItem({\n                          key: itemDictionaryElement.key,\n                          value: {\n                            ...itemDictionaryElement.value,\n                            name: newButtonName,\n                          },\n                        });\n                      }}\n                    />\n                  </div>\n                  <TextInput\n                    originalValue={itemDictionaryElement.value.links[0]}\n                    label={\"Link to open on click\"}\n                    onValueChange={(newLink) => {\n                      updateItem({\n                        key: itemDictionaryElement.key,\n                        value: {\n                          ...itemDictionaryElement.value,\n                          links: [newLink],\n                        },\n                      });\n                    }}\n                  />\n                  <Button\n                    color=\"secondary\"\n                    onClick={() => {\n                      removeItemByKey(itemDictionaryElement.key);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n        <div>\n          <Button\n            /* style={{marginTop: \"1%\"}} */\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              addItemWithValue({\n                name: \"Unamed Button\",\n                links: [\"http://google.com\"],\n              });\n            }}\n          >\n            Add Item\n          </Button>\n        </div>\n      </>\n    </div>\n  );\n}\n\nfunction useDictionary(originalItems) {\n  if (!originalItems) {\n    originalItems = [];\n  }\n  const [itemDictionary, setItemDictionary] = useState(\n    originalItems.map((item, index) => {\n      return {key: getKeyFromIndex(index), value: item};\n    }),\n  );\n\n  function addItemWithValue(newValue) {\n    const newKey = getKeyFromIndex(itemDictionary.length);\n    setItemDictionary(itemDictionary.concat({key: newKey, value: newValue}));\n  }\n\n  function removeItemByKey(keyToDelete) {\n    setItemDictionary(\n      itemDictionary.filter((item) => {\n        return item.key !== keyToDelete;\n      }),\n    );\n  }\n  function updateItem(itemToUpdate) {\n    setItemDictionary(\n      itemDictionary.map((item) => {\n        if (item.key === itemToUpdate.key) {\n          return {key: item.key, value: itemToUpdate.value};\n        }\n        return item;\n      }),\n    );\n  }\n  function getDictionaryValues() {\n    return itemDictionary.map((dictionaryItems) => {\n      return dictionaryItems.value;\n    });\n  }\n\n  return {\n    addItemWithValue,\n    removeItemByKey,\n    updateItem,\n    getDictionaryValues,\n    itemDictionary,\n  };\n}\nfunction ListEditor({\n  originalList,\n  title,\n  getKeyFromIndex = (index) => uuid(),\n  onListChange,\n  onSave,\n  labels,\n  //isNotAllowingDuplicates = false,\n}) {\n  const {\n    removeItemByKey,\n    addItemWithValue,\n    updateItem,\n    itemDictionary,\n    getDictionaryValues,\n  } = useDictionary(originalList);\n\n  // function checkBeforeEnter(dictionaryItem) {\n  //   const itemsWithSameValue = itemDictionary.filter(() => {\n  //     return newItem.key === _item.value;\n  //   });\n  //   setItemDictionary(listToAppendTo.filter(dictionaryItem.key));\n  // }\n\n  useEffect(() => {\n    onListChange(getDictionaryValues());\n  }, [itemDictionary]);\n\n  return (\n    <>\n      <h1>{title}</h1>\n\n      <ul\n        style={{\n          width: \"40%\",\n          listStyle: \"none\",\n          margin: \"auto\",\n          paddingLeft: \"0\",\n          textAlign: \"center\",\n        }}\n      >\n        {itemDictionary.map((itemDictionaryElement, index) => {\n          return (\n            <li key={itemDictionaryElement.key} style={{margin: \"auto\"}}>\n              <div style={{marginBottom: \"1%\"}}>\n                <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                  <TextInput\n                    originalValue={itemDictionaryElement.value}\n                    label={labels[index]}\n                    onValueChange={(newButtonName) => {\n                      updateItem({\n                        key: itemDictionaryElement.key,\n                        value: newButtonName,\n                      });\n                    }}\n                  />\n                  <Button\n                    color=\"secondary\"\n                    onClick={() => {\n                      removeItemByKey(itemDictionaryElement.key);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n      <div>\n        <Button\n          style={{marginTop: \"1%\"}}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            addItemWithValue(\"\");\n          }}\n        >\n          Add Item\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport function TextInput({originalValue = \"\", label, onValueChange}) {\n  return (\n    <>\n      <TextField\n        /*an id is required to get by label in tests*/\n        id={`input-for-${label}`}\n        label={label}\n        fullWidth={true}\n        onChange={(event) => {\n          onValueChange(event.target.value);\n        }}\n        defaultValue={originalValue}\n        variant=\"outlined\"\n      />\n    </>\n  );\n}\n\nfunction dictionaryObjectPropertyReducer(state, action) {\n  switch (action.type) {\n    case \"SET_PROPERTY_WITH_KEY\":\n      const newState = state.map((item) => {\n        if (item.key === action.key) {\n          const objectToChange = item.value;\n          const newObject = {\n            ...objectToChange,\n            [action.property]: action.newValue,\n          };\n          return {key: item.key, value: newObject};\n        } else {\n          return item;\n        }\n      });\n      return newState;\n    default:\n      return state;\n  }\n}\n","import {Button, Snackbar, TextField} from \"@material-ui/core\";\nimport {useQuery, useMutation, ReactQueryCacheProvider} from \"react-query\";\nimport {v4 as uuid} from \"uuid\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport React, {useEffect, useState} from \"react\";\n\nimport {ItemFetcher} from \"./async-tools\";\n\nimport {\n  fetchButtonConfigGroup,\n  saveButtonConfigGroup,\n  saveSettings,\n  fetchSettings,\n} from \"./api/settings-storage.js\";\nimport SettingsPage from \"./settings-page\";\n\nconst defaultLinkButtonConfigGroup = [\n  {\n    name: \"Open Google\",\n    links: [\"https://google.com\"],\n  },\n\n  {\n    name: \"Open Book\",\n    links: [\"https://read.amazon.com\"],\n  },\n\n  {\n    name: \"Open Music\",\n    links: [\"https://pandora.com\", \"https://spotify.com\"],\n  },\n\n  {\n    name: \"Open Podcasts\",\n    links: [\"https://radiopublic.com/99pi\"],\n  },\n];\n\n// saveButtonConfigGroup(defaultLinkButtonConfigGroup);\n\nexport default function SettingsPageStorageController({\n  fetchItems = fetchSettings,\n  saveItems = saveSettings,\n}) {\n  const settings = useQuery(\"smoothGo_Settings\", fetchItems);\n  const asyncButtonConfigGroup = settings.linkButtonNamesAndLinks;\n  const [mutateSaveConfigGroup, asyncSave] = useMutation(saveItems);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveStatus, setSaveStatus] = useState(null);\n\n  const [configToSave, setConfigToSave] = useState(null);\n  const isAllSettingsLoaded = true; // musicURL !== null && imageURL !== null;\n\n  function handleSave(allSettings) {\n    setConfigToSave(allSettings);\n  }\n\n  useEffect(() => {\n    if (configToSave === null) return;\n\n    mutateSaveConfigGroup(configToSave);\n  }, [configToSave]);\n\n  return (\n    <>\n      <ItemFetcher\n        fetchItems={fetchSettings}\n        renderError={(errorMessage) => (\n          <SnackAlert severity=\"error\">\n            Load Failed <br />\n            {errorMessage}\n          </SnackAlert>\n        )}\n        renderLoading={() => <p>Loading Setttings...</p>}\n        renderSuccess={(settingsResult) => {\n          return (\n            <SettingsPage\n              saveSettings={handleSave}\n              linkButtonConfigGroup={settingsResult.linkButtonConfigGroup}\n              lowValueURLTags={settingsResult.lowValueURLTags}\n              saveStatus={saveStatus}\n            />\n          );\n        }}\n      />\n\n      {asyncSave.isSuccess && (\n        <>\n          <SnackAlert severity=\"success\">Save successful</SnackAlert>\n        </>\n      )}\n      {asyncSave.isError && (\n        <>\n          <SnackAlert severity=\"error\">\n            Save failed : | <br />\n            {asyncSave.error.message}\n          </SnackAlert>\n        </>\n      )}\n    </>\n  );\n}\n\nfunction SnackAlert({severity, children, autoHideDuration = 4000}) {\n  const [isOpen, setIsOpen] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setIsOpen(false);\n    }, autoHideDuration);\n  }, []);\n  return (\n    <Snackbar open={isOpen} autoHideDuration={autoHideDuration}>\n      <MuiAlert\n        severity=\"success\"\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        elevation={6}\n        variant=\"filled\"\n      >\n        {children}\n      </MuiAlert>\n    </Snackbar>\n  );\n}\n\nexport function TextInput({originalValue = \"\", label, onValueChange}) {\n  // function handleLinkEdit(newLinkValue) {\n  //   setLinks(newLinkValue.split(\",\"));\n  // }\n\n  return (\n    <>\n      <TextField\n        /*an id is required to get by label in tests*/\n        id={`input-for-${label}`}\n        label={label}\n        fullWidth={true}\n        onChange={(event) => {\n          onValueChange(event.target.value);\n        }}\n        defaultValue={originalValue}\n        variant=\"outlined\"\n      />\n    </>\n  );\n}\nfunction objectPropertyReducer(state, action) {\n  switch (action.type) {\n    case \"SET_PROPERTY_WITH_KEY\":\n      const newState = state.map((item) => {\n        if (item.key === action.key) {\n          const objectToChange = item.value;\n          const newObject = {\n            ...objectToChange,\n            [action.property]: action.newValue,\n          };\n          return {key: item.key, value: newObject};\n        } else {\n          return item;\n        }\n      });\n      return newState;\n    default:\n      return state;\n  }\n}\n","import \"./App.css\";\n\nimport React from \"react\";\nimport SettingsPageStorageController from \"./settings-storage-controller.jsx\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SettingsPageStorageController />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}